{
  "address": "0xEf8aae2F65E20d20e2c855c29e446b010351eB83",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_marginAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NewAccount",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "contract MarginBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "00bad5ae252566d46f1b4a606a3821da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_marginAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract MarginBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"JaredBorders and JChiaramonte7\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_addressResolver\":\": contract address for synthetix address resolver\",\"_marginAsset\":\": token contract address used for account margin\",\"_version\":\": version of contract\"}},\"newAccount()\":{\"details\":\"this contract is the initial owner of cloned MarginBase, but ownership is transferred after successful initialization\"}},\"title\":\"Kwenta MarginBase Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressResolver()\":{\"notice\":\"synthetix address resolver\"},\"constructor\":{\"notice\":\"deploy MarginBase implementation to later be cloned\"},\"implementation()\":{\"notice\":\"MarginBase contract acting as user's account\"},\"marginAsset()\":{\"notice\":\"ERC20 token used to interact with markets\"},\"newAccount()\":{\"notice\":\"clone MarginBase (i.e. create new account for user)\"}},\"notice\":\"Factory which enables deploying a MarginBase account for any user \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarginAccountFactory.sol\":\"MarginAccountFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarginAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./utils/MinimalProxyFactory.sol\\\";\\nimport \\\"./MarginBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Kwenta MarginBase Factory\\n/// @author JaredBorders and JChiaramonte7\\n/// @notice Factory which enables deploying a MarginBase account for any user \\ncontract MarginAccountFactory is MinimalProxyFactory {\\n    \\n    string public version; // format: (0.1.0)\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Immutables\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice MarginBase contract acting as user's account\\n    MarginBase public immutable implementation;\\n\\n    /// @notice ERC20 token used to interact with markets\\n    IERC20 public immutable marginAsset;\\n\\n    /// @notice synthetix address resolver\\n    address public immutable addressResolver;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event NewAccount(address indexed owner, address account);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constructor\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice deploy MarginBase implementation to later be cloned\\n    /// @param _version: version of contract\\n    /// @param _marginAsset: token contract address used for account margin\\n    /// @param _addressResolver: contract address for synthetix address resolver\\n    constructor(\\n        string memory _version,\\n        address _marginAsset,\\n        address _addressResolver\\n    ) {\\n        version = _version;\\n        implementation = new MarginBase();\\n        marginAsset = IERC20(_marginAsset);\\n        addressResolver = _addressResolver;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Account Deployment\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice clone MarginBase (i.e. create new account for user)\\n    /// @dev this contract is the initial owner of cloned MarginBase,\\n    /// but ownership is transferred after successful initialization\\n    function newAccount() external returns (address) {\\n        MarginBase account = MarginBase(\\n            _cloneAsMinimalProxy(address(implementation), \\\"Creation failure\\\")\\n        );\\n        account.initialize(address(marginAsset), addressResolver);\\n        account.transferOwnership(msg.sender);\\n\\n        emit NewAccount(msg.sender, address(account));\\n        return address(account);\\n    }\\n}\\n\",\"keccak256\":\"0x184370c975e3d382c0e8f73406324a690a58424e07571708f29763b4c38e936a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/MarginBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./utils/MinimalProxyable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IAddressResolver.sol\\\";\\nimport \\\"./interfaces/IFuturesMarket.sol\\\";\\nimport \\\"./interfaces/IFuturesMarketManager.sol\\\";\\n\\n/// @title Kwenta MarginBase Account\\n/// @author JaredBorders and JChiaramonte7\\n/// @notice Flexible, minimalist, and gas-optimized cross-margin enabled account\\n/// for managing perpetual futures positions\\ncontract MarginBase is MinimalProxyable {\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // tracking code used when modifying positions\\n    bytes32 private constant TRACKING_CODE = \\\"KWENTA\\\";\\n\\n    // name for futures market manager, needed for fetching market key\\n    bytes32 private constant FUTURES_MANAGER = \\\"FuturesMarketManager\\\";\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Types\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // marketKey: synthetix futures market id/key\\n    // margin: amount of margin (in sUSD) in specific futures market\\n    // size: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    struct ActiveMarketPosition {\\n        bytes32 marketKey;\\n        uint128 margin;\\n        int128 size;\\n    }\\n\\n    // marketKey: synthetix futures market id/key\\n    // marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    // sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    // isClosing: indicates if position needs to be closed\\n    struct UpdateMarketPositionSpec {\\n        bytes32 marketKey;\\n        int256 marginDelta; // positive indicates deposit, negative withdraw\\n        int256 sizeDelta;\\n        bool isClosing; // if true, marginDelta nor sizeDelta are considered. simply closes position\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                State\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice synthetix address resolver\\n    IAddressResolver private addressResolver;\\n\\n    /// @notice synthetix futures market manager\\n    IFuturesMarketManager private futuresManager;\\n\\n    /// @notice token contract used for account margin\\n    IERC20 public marginAsset;\\n\\n    /// @notice market keys that the account has active positions in\\n    bytes32[] public activeMarketKeys;\\n\\n    /// @notice market keys mapped to active market positions\\n    mapping(bytes32 => ActiveMarketPosition) public activeMarketPositions;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice emitted after a successful deposit\\n    /// @param user: the address that deposited into account\\n    /// @param amount: amount of marginAsset to deposit into marginBase account\\n    event Deposit(address indexed user, uint256 amount);\\n\\n    /// @notice emitted after a successful withdrawal\\n    /// @param user: the address that withdrew from account\\n    /// @param amount: amount of marginAsset to withdraw from marginBase account\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Errors\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice amount deposited/withdrawn into/from account cannot be zero\\n    error AmountCantBeZero();\\n\\n    /// @notice position with given marketKey does not exist\\n    /// @param marketKey: key for synthetix futures market\\n    error MissingMarketKey(bytes32 marketKey);\\n\\n    /// @notice limit size of new position specs passed into distribute margin\\n    /// @param numberOfNewPositions: number of new position specs\\n    error MaxNewPositionsExceeded(uint256 numberOfNewPositions);\\n\\n    /// @notice market withdrawal size was positive (i.e. deposit)\\n    /// @param withdrawalSize: amount of margin asset to withdraw from market\\n    error InvalidMarketWithdrawSize(int256 withdrawalSize);\\n\\n    /// @notice market deposit size was negative (i.e. withdraw)\\n    /// @param depositSize: amount of margin asset to deposit into market\\n    error InvalidMarketDepositSize(int256 depositSize);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Constructor & Initializer\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice constructor never used except for first CREATE\\n    // solhint-disable-next-line\\n    constructor() MinimalProxyable() {}\\n\\n    /// @notice initialize contract (only once) and transfer ownership to caller\\n    /// @param _marginAsset: token contract address used for account margin\\n    /// @param _addressResolver: contract address for synthetix address resolver\\n    function initialize(address _marginAsset, address _addressResolver)\\n        external\\n        initOnce\\n    {\\n        addressResolver = IAddressResolver(_addressResolver);\\n        futuresManager = IFuturesMarketManager(\\n            addressResolver.requireAndGetAddress(\\n                FUTURES_MANAGER,\\n                \\\"MarginBase: Could not get Futures Market Manager\\\"\\n            )\\n        );\\n        marginAsset = IERC20(_marginAsset);\\n\\n        /// @dev the Ownable constructor is never called when we create minimal proxies\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Views\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice get number of active market positions account has\\n    /// @return number of positions which are currently active for account\\n    function getNumberOfActivePositions() external view returns (uint256) {\\n        return activeMarketKeys.length;\\n    }\\n\\n    /// @notice get all active market positions\\n    /// @return positions which are currently active for account (ActiveMarketPosition structs)\\n    function getAllActiveMarketPositions()\\n        external\\n        view\\n        returns (ActiveMarketPosition[] memory)\\n    {\\n        ActiveMarketPosition[] memory positions = new ActiveMarketPosition[](\\n            activeMarketKeys.length\\n        );\\n        for (uint16 i = 0; i < activeMarketKeys.length; i++) {\\n            positions[i] = (activeMarketPositions[activeMarketKeys[i]]);\\n        }\\n        return positions;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Account Deposit & Withdraw\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @param _amount: amount of marginAsset to deposit into marginBase account\\n    function deposit(uint256 _amount)\\n        external\\n        onlyOwner\\n    {   \\n        /// @notice amount deposited into account cannot be zero\\n        if (_amount == 0) {\\n            revert AmountCantBeZero();\\n        }\\n\\n        // transfer in margin asset from user\\n        // (will revert if user does not have amount specified)\\n        require(\\n            marginAsset.transferFrom(owner(), address(this), _amount),\\n            \\\"MarginBase: deposit failed\\\"\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /// @param _amount: amount of marginAsset to withdraw from marginBase account\\n    function withdraw(uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        /// @notice amount withdrawn from account cannot be zero\\n        if (_amount == 0) {\\n            revert AmountCantBeZero();\\n        }\\n\\n        // transfer out margin asset to user\\n        // (will revert if account does not have amount specified)\\n        require(\\n            marginAsset.transfer(owner(), _amount),\\n            \\\"MarginBase: withdraw failed\\\"\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Margin Distribution\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice distribute margin across all/some positions specified via _newPositions\\n    /// @dev _newPositions may contain any number of new or existing positions\\n    /// @dev caller can close and withdraw all margin from position if _newPositions[i].isClosing is true\\n    /// @param _newPositions: an array of UpdateMarketPositionSpec's used to modify active market positions\\n    function distributeMargin(UpdateMarketPositionSpec[] calldata _newPositions)\\n        external\\n        onlyOwner\\n    {\\n        /// @notice limit size of new position specs passed into distribute margin\\n        if (_newPositions.length > type(uint16).max) {\\n            revert MaxNewPositionsExceeded(_newPositions.length);\\n        }\\n\\n        // for each new position in _newPositions, distribute margin accordingly and update state\\n        for (uint16 i = 0; i < _newPositions.length; i++) {\\n            if (_newPositions[i].isClosing) {\\n                /// @notice close position and transfer margin back to account\\n                closePositionAndWithdraw(_newPositions[i].marketKey);\\n            } else if (_newPositions[i].marginDelta < 0) {\\n                /// @notice remove margin from market and potentially adjust size\\n                modifyPositionForMarketAndWithdraw(\\n                    _newPositions[i].marginDelta,\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey\\n                );\\n            } else {\\n                /// @dev marginDelta >= 0\\n                /// @notice deposit margin into market and potentially adjust size\\n                depositAndModifyPositionForMarket(\\n                    _newPositions[i].marginDelta,\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey\\n                );\\n                // if marginDelta is 0, there will simply be NO additional\\n                // margin deposited into the market\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Internal Margin Distribution\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice deposit margin into specific market, creating/adding to a position\\n    /// @param _depositSize: size of deposit in sUSD\\n    /// @param _sizeDelta: size and position type (long//short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    function depositAndModifyPositionForMarket(\\n        int256 _depositSize,\\n        int256 _sizeDelta,\\n        bytes32 _marketKey\\n    ) internal {\\n        // _depositSize must be positive or zero (i.e. not a withdraw)\\n        if (_depositSize < 0) {\\n            revert InvalidMarketDepositSize(_depositSize);\\n        }\\n\\n        // define market via _marketKey\\n        IFuturesMarket market = futuresMarket(_marketKey);\\n\\n        /// @notice alter the amount of margin in specific market position\\n        /// @dev positive input triggers a deposit; a negative one, a withdrawal\\n        market.transferMargin(_depositSize);\\n\\n        /// @dev if _sizeDelta is 0, then we do not want to modify position size, only margin\\n        if (_sizeDelta != 0) {\\n            // modify position in specific market with KWENTA tracking code\\n            market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n        }\\n\\n        // fetch new position data from Synthetix\\n        (, , uint128 margin, , int128 size) = market.positions(address(this));\\n\\n        // update state for given open market position\\n        updateActiveMarketPosition(_marketKey, margin, size, market);\\n    }\\n\\n    /// @notice modify active position and withdraw marginAsset from market into this account\\n    /// @param _withdrawalSize: size of sUSD to withdraw from market into account\\n    /// @param _sizeDelta: size and position type (long//short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    function modifyPositionForMarketAndWithdraw(\\n        int256 _withdrawalSize,\\n        int256 _sizeDelta,\\n        bytes32 _marketKey\\n    ) internal {\\n        // _withdrawalSize must be negative or zero (i.e. not a deposit)\\n        if (_withdrawalSize > 0) {\\n            revert InvalidMarketWithdrawSize(_withdrawalSize);\\n        }\\n\\n        // define market via _marketKey\\n        IFuturesMarket market = futuresMarket(_marketKey);\\n\\n        /// @dev if _sizeDelta is 0, then we do not want to modify position size, only margin\\n        if (_sizeDelta != 0) {\\n            // modify position in specific market with KWENTA tracking code\\n            market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n        }\\n\\n        /// @notice alter the amount of margin in specific market position\\n        /// @dev positive input triggers a deposit; a negative one, a withdrawal\\n        market.transferMargin(_withdrawalSize);\\n\\n        // fetch new position data from Synthetix\\n        (, , uint128 margin, , int128 size) = market.positions(address(this));\\n\\n        // update state for given open market position\\n        updateActiveMarketPosition(_marketKey, margin, size, market);\\n    }\\n\\n    /// @notice closes futures position and withdraws all margin in that market back to this account\\n    /// @param _marketKey: synthetix futures market id/key\\n    function closePositionAndWithdraw(bytes32 _marketKey) internal {\\n        // update state (remove market)\\n        removeActiveMarketPositon(_marketKey);\\n\\n        // define market via _marketKey\\n        IFuturesMarket market = futuresMarket(_marketKey);\\n\\n        // close market position\\n        market.closePosition();\\n\\n        // withdraw margin back to this account\\n        market.withdrawAllMargin();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Internal Account State Management\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice used internally to update contract state for the account's active position tracking\\n    /// @param _marketKey: key for synthetix futures market\\n    /// @param _margin: amount of margin the specific market position has\\n    /// @param _size: represents size of position (i.e. accounts for leverage)\\n    /// @dev if _size becomes 0, remove position from account state and withdraw margin\\n    function updateActiveMarketPosition(\\n        bytes32 _marketKey,\\n        uint128 _margin,\\n        int128 _size,\\n        IFuturesMarket market\\n    ) internal {\\n        // if position size is 0, position is effectively closed on\\n        // FuturesMarket but margin is still in contract, thus it must\\n        // be withdrawn back to this account\\n        if (_size == 0) {\\n            // update state (remove market)\\n            removeActiveMarketPositon(_marketKey);\\n\\n            // withdraw margin back to this account\\n            market.withdrawAllMargin();\\n            return;\\n        }\\n\\n        ActiveMarketPosition memory newPosition = ActiveMarketPosition(\\n            _marketKey,\\n            _margin,\\n            _size\\n        );\\n\\n        // check if this is updating a position or creating one\\n        if (activeMarketPositions[_marketKey].marketKey == 0) {\\n            activeMarketKeys.push(_marketKey);\\n        }\\n\\n        // update state of active market positions\\n        activeMarketPositions[_marketKey] = newPosition;\\n    }\\n\\n    /// @notice used internally to remove active market position from contract's internal state\\n    /// @param _marketKey: key for previously active market position\\n    function removeActiveMarketPositon(bytes32 _marketKey) internal {\\n        // ensure active market exists\\n        if (activeMarketPositions[_marketKey].marketKey == 0) {\\n            revert MissingMarketKey(_marketKey);\\n        }\\n\\n        delete activeMarketPositions[_marketKey];\\n        uint256 numberOfActiveMarkets = activeMarketKeys.length;\\n\\n        for (uint16 i = 0; i < numberOfActiveMarkets; i++) {\\n            // once _marketKey is encountered, swap with\\n            // last element in array and exit for-loop\\n            if (activeMarketKeys[i] == _marketKey) {\\n                activeMarketKeys[i] = activeMarketKeys[\\n                    numberOfActiveMarkets - 1\\n                ];\\n                break;\\n            }\\n        }\\n        // remove last element (which will be _marketKey)\\n        activeMarketKeys.pop();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                Internal Futures Market Initialization\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice addressResolver fetches IFuturesMarket address for specific market\\n    /// @param _marketKey: key for synthetix futures market\\n    /// @return IFuturesMarket contract interface\\n    function futuresMarket(bytes32 _marketKey)\\n        internal\\n        view\\n        returns (IFuturesMarket)\\n    {\\n        return IFuturesMarket(futuresManager.marketForKey(_marketKey));\\n    }\\n}\\n\",\"keccak256\":\"0x62b185f690253ed83b090779e8eba243442bee03f52f7d202c340a345f9f27e4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\",\"keccak256\":\"0x1ce5b918283eb1941981d1e0716280757aac4536da653d049c7e43b176620346\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFuturesMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./IFuturesMarketBaseTypes.sol\\\";\\n\\ninterface IFuturesMarket {\\n    /* ========== FUNCTION INTERFACE ========== */\\n\\n    /* ---------- Market Details ---------- */\\n\\n    function marketKey() external view returns (bytes32 key);\\n\\n    function baseAsset() external view returns (bytes32 key);\\n\\n    function marketSize() external view returns (uint128 size);\\n\\n    function marketSkew() external view returns (int128 skew);\\n\\n    function fundingLastRecomputed() external view returns (uint32 timestamp);\\n\\n    function fundingSequence(uint index) external view returns (int128 netFunding);\\n\\n    function positions(address account)\\n        external\\n        view\\n        returns (\\n            uint64 id,\\n            uint64 fundingIndex,\\n            uint128 margin,\\n            uint128 lastPrice,\\n            int128 size\\n        );\\n\\n    function assetPrice() external view returns (uint price, bool invalid);\\n\\n    function marketSizes() external view returns (uint long, uint short);\\n\\n    function marketDebt() external view returns (uint debt, bool isInvalid);\\n\\n    function currentFundingRate() external view returns (int fundingRate);\\n\\n    function unrecordedFunding() external view returns (int funding, bool invalid);\\n\\n    function fundingSequenceLength() external view returns (uint length);\\n\\n    /* ---------- Position Details ---------- */\\n\\n    function notionalValue(address account) external view returns (int value, bool invalid);\\n\\n    function profitLoss(address account) external view returns (int pnl, bool invalid);\\n\\n    function accruedFunding(address account) external view returns (int funding, bool invalid);\\n\\n    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid);\\n\\n    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid);\\n\\n    function liquidationPrice(address account) external view returns (uint price, bool invalid);\\n\\n    function liquidationFee(address account) external view returns (uint);\\n\\n    function canLiquidate(address account) external view returns (bool);\\n\\n    function orderFee(int sizeDelta) external view returns (uint fee, bool invalid);\\n\\n    function postTradeDetails(int sizeDelta, address sender)\\n        external\\n        view\\n        returns (\\n            uint margin,\\n            int size,\\n            uint price,\\n            uint liqPrice,\\n            uint fee,\\n            IFuturesMarketBaseTypes.Status status\\n        );\\n\\n    /* ---------- Market Operations ---------- */\\n\\n    function recomputeFunding() external returns (uint lastIndex);\\n\\n    function transferMargin(int marginDelta) external;\\n\\n    function withdrawAllMargin() external;\\n\\n    function modifyPosition(int sizeDelta) external;\\n\\n    function modifyPositionWithTracking(int sizeDelta, bytes32 trackingCode) external;\\n\\n    function submitNextPriceOrder(int sizeDelta) external;\\n\\n    function submitNextPriceOrderWithTracking(int sizeDelta, bytes32 trackingCode) external;\\n\\n    function cancelNextPriceOrder(address account) external;\\n\\n    function executeNextPriceOrder(address account) external;\\n\\n    function closePosition() external;\\n\\n    function closePositionWithTracking(bytes32 trackingCode) external;\\n\\n    function liquidatePosition(address account) external;\\n}\\n\",\"keccak256\":\"0x0ade2a4b4b20fd43db565590764a63565eb5b1923d8921e2d4538d073d715f62\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFuturesMarketBaseTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IFuturesMarketBaseTypes {\\n    /* ========== TYPES ========== */\\n\\n    enum Status {\\n        Ok,\\n        InvalidPrice,\\n        PriceOutOfBounds,\\n        CanLiquidate,\\n        CannotLiquidate,\\n        MaxMarketSizeExceeded,\\n        MaxLeverageExceeded,\\n        InsufficientMargin,\\n        NotPermitted,\\n        NilOrder,\\n        NoPositionOpen,\\n        PriceTooVolatile\\n    }\\n\\n    // If margin/size are positive, the position is long; if negative then it is short.\\n    struct Position {\\n        uint64 id;\\n        uint64 lastFundingIndex;\\n        uint128 margin;\\n        uint128 lastPrice;\\n        int128 size;\\n    }\\n\\n    // next-price order storage\\n    struct NextPriceOrder {\\n        int128 sizeDelta; // difference in position to pass to modifyPosition\\n        uint128 targetRoundId; // price oracle roundId using which price this order needs to exucted\\n        uint128 commitDeposit; // the commitDeposit paid upon submitting that needs to be refunded if order succeeds\\n        uint128 keeperDeposit; // the keeperDeposit paid upon submitting that needs to be paid / refunded on tx confirmation\\n        bytes32 trackingCode; // tracking code to emit on execution for volume source fee sharing\\n    }\\n}\\n\",\"keccak256\":\"0xa555e55e28be45ba0f75efabfb6961eac2121997bf37a2f42a475d7c76156a6f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFuturesMarketManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IFuturesMarketManager {\\n    function markets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    function numMarkets() external view returns (uint);\\n\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function marketForKey(bytes32 marketKey) external view returns (address);\\n\\n    function marketsForKeys(bytes32[] calldata marketKeys) external view returns (address[] memory);\\n\\n    function totalDebt() external view returns (uint debt, bool isInvalid);\\n}\",\"keccak256\":\"0x30b60e670e95e3f9096232f51bd21abd8c12f0dc8cfffe3cff79aad7f714fe31\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MinimalProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ncontract MinimalProxyFactory {\\n    function _cloneAsMinimalProxy(address _base, string memory _revertMsg)\\n        internal\\n        returns (address clone)\\n    {\\n        bytes memory createData = _generateMinimalProxyCreateData(_base);\\n\\n        assembly {\\n            clone := create(\\n                0, // no value\\n                add(createData, 0x20), // data\\n                55 // data is always 55 bytes (10 constructor + 45 code)\\n            )\\n        }\\n\\n        // If CREATE fails for some reason, address(0) is returned\\n        require(clone != address(0), _revertMsg);\\n    }\\n\\n    function _generateMinimalProxyCreateData(address _base)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                //---- constructor -----\\n                bytes10(0x3d602d80600a3d3981f3),\\n                //---- proxy code -----\\n                bytes10(0x363d3d373d3d3d363d73),\\n                _base,\\n                bytes15(0x5af43d82803e903d91602b57fd5bf3)\\n            );\\n    }\\n}\",\"keccak256\":\"0xcc04c9232bc04c01a000fccbbaed391acccec5817b3eff994d077f4319fdeaff\",\"license\":\"MIT\"},\"contracts/utils/MinimalProxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MinimalProxyable is Ownable {\\n\\n    bool masterCopy;\\n    bool initialized;\\n\\n    constructor() {\\n        masterCopy = true;\\n    }\\n\\n    function initialize() public initOnce {}\\n\\n    modifier initOnce {\\n        require(!masterCopy, \\\"Cannot initialize implementation\\\");\\n        require(!initialized, \\\"Already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0xfa99c61553ada20347d354b15cfa016bc7d48edb120c9bd3722f687a8adea244\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620033e6380380620033e68339818101604052810190620000379190620003e0565b82600090805190602001906200004f92919062000120565b506040516200005e90620001b1565b604051809103906000f0801580156200007b573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620004bf565b8280546200012e906200048a565b90600052602060002090601f0160209004810192826200015257600085556200019e565b82601f106200016d57805160ff19168380011785556200019e565b828001600101855582156200019e579182015b828111156200019d57825182559160200191906001019062000180565b5b509050620001ad9190620001bf565b5090565b61267b8062000d6b83390190565b5b80821115620001da576000816000905550600101620001c0565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024782620001fc565b810181811067ffffffffffffffff821117156200026957620002686200020d565b5b80604052505050565b60006200027e620001de565b90506200028c82826200023c565b919050565b600067ffffffffffffffff821115620002af57620002ae6200020d565b5b620002ba82620001fc565b9050602081019050919050565b60005b83811015620002e7578082015181840152602081019050620002ca565b83811115620002f7576000848401525b50505050565b6000620003146200030e8462000291565b62000272565b905082815260208101848484011115620003335762000332620001f7565b5b62000340848285620002c7565b509392505050565b600082601f83011262000360576200035f620001f2565b5b815162000372848260208601620002fd565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003a8826200037b565b9050919050565b620003ba816200039b565b8114620003c657600080fd5b50565b600081519050620003da81620003af565b92915050565b600080600060608486031215620003fc57620003fb620001e8565b5b600084015167ffffffffffffffff8111156200041d576200041c620001ed565b5b6200042b8682870162000348565b93505060206200043e86828701620003c9565b92505060406200045186828701620003c9565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004a357607f821691505b602082108103620004b957620004b86200045b565b5b50919050565b60805160a05160c051610868620005036000396000818160f4015261028f0152600081816101ca015261026e0152600081816101a601526101f401526108686000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806305a2ee2a1461005c57806354fd4d501461007a5780635c60da1b1461009857806382689cae146100b6578063bf335e62146100d4575b600080fd5b6100646100f2565b60405161007191906104ed565b60405180910390f35b610082610116565b60405161008f91906105a1565b60405180910390f35b6100a06101a4565b6040516100ad9190610622565b60405180910390f35b6100be6101c8565b6040516100cb919061065e565b60405180910390f35b6100dc6101ec565b6040516100e991906104ed565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054610123906106a8565b80601f016020809104026020016040519081016040528092919081815260200182805461014f906106a8565b801561019c5780601f106101715761010080835404028352916020019161019c565b820191906000526020600020905b81548152906001019060200180831161017f57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061024e7f00000000000000000000000000000000000000000000000000000000000000006040518060400160405280601081526020017f4372656174696f6e206661696c757265000000000000000000000000000000008152506103bd565b90508073ffffffffffffffffffffffffffffffffffffffff1663485cc9557f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016102cb9291906106d9565b600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161033691906104ed565b600060405180830381600087803b15801561035057600080fd5b505af1158015610364573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f14cb25cca821184a88389fa7823ef6a4cd65897a89cbdcf5169542b8d790478b826040516103ae91906104ed565b60405180910390a28091505090565b6000806103c984610451565b90506037602082016000f09150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158390610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044091906105a1565b60405180910390fd5b505092915050565b6060693d602d80600a3d3981f360b01b69363d3d373d3d3d363d7360b01b836e5af43d82803e903d91602b57fd5bf360881b60405160200161049694939291906107e4565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d7826104ac565b9050919050565b6104e7816104cc565b82525050565b600060208201905061050260008301846104de565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610542578082015181840152602081019050610527565b83811115610551576000848401525b50505050565b6000601f19601f8301169050919050565b600061057382610508565b61057d8185610513565b935061058d818560208601610524565b61059681610557565b840191505092915050565b600060208201905081810360008301526105bb8184610568565b905092915050565b6000819050919050565b60006105e86105e36105de846104ac565b6105c3565b6104ac565b9050919050565b60006105fa826105cd565b9050919050565b600061060c826105ef565b9050919050565b61061c81610601565b82525050565b60006020820190506106376000830184610613565b92915050565b6000610648826105ef565b9050919050565b6106588161063d565b82525050565b6000602082019050610673600083018461064f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106c057607f821691505b6020821081036106d3576106d2610679565b5b50919050565b60006040820190506106ee60008301856104de565b6106fb60208301846104de565b9392505050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61074961074482610702565b61072e565b82525050565b60008160601b9050919050565b60006107678261074f565b9050919050565b60006107798261075c565b9050919050565b61079161078c826104cc565b61076e565b82525050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b6000819050919050565b6107de6107d982610797565b6107c3565b82525050565b60006107f08287610738565b600a820191506108008286610738565b600a820191506108108285610780565b60148201915061082082846107cd565b600f820191508190509594505050505056fea26469706673582212200c1caac3a7f2f534a6249f8b6f108a068dea80a2577cdc2a6aa81627e0383b5264736f6c634300080d003360806040523480156200001157600080fd5b5062000032620000266200005360201b60201c565b6200005b60201b60201c565b6001600060146101000a81548160ff0219169083151502179055506200011f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61254c806200012f6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638129fc1c1161008c578063ab3ceafa11610066578063ab3ceafa146101da578063b6b55f25146101f8578063ce459e6514610214578063f2fde38b14610232576100cf565b80638129fc1c1461019457806382689cae1461019e5780638da5cb5b146101bc576100cf565b80630af5c2d0146100d45780632e1a7d4d14610106578063325314e514610122578063428952af14610152578063485cc9551461016e578063715018a61461018a575b600080fd5b6100ee60048036038101906100e99190611913565b61024e565b6040516100fd93929190611996565b60405180910390f35b610120600480360381019061011b9190611a03565b6102a1565b005b61013c60048036038101906101379190611a03565b61048e565b6040516101499190611a30565b60405180910390f35b61016c60048036038101906101679190611ab0565b6104b2565b005b61018860048036038101906101839190611b5b565b61070f565b005b610192610955565b005b61019c6109dd565b005b6101a6610a9a565b6040516101b39190611bfa565b60405180910390f35b6101c4610ac0565b6040516101d19190611c24565b60405180910390f35b6101e2610ae9565b6040516101ef9190611c4e565b60405180910390f35b610212600480360381019061020d9190611a03565b610af6565b005b61021c610ce5565b6040516102299190611d87565b60405180910390f35b61024c60048036038101906102479190611da9565b610e46565b005b60056020528060005260406000206000915090508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a9004600f0b905083565b6102a9610f3d565b73ffffffffffffffffffffffffffffffffffffffff166102c7610ac0565b73ffffffffffffffffffffffffffffffffffffffff161461031d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031490611e33565b60405180910390fd5b60008103610357576040517f46f1397d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61039d610ac0565b836040518363ffffffff1660e01b81526004016103bb929190611e53565b6020604051808303816000875af11580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190611eb4565b61043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043490611f2d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516104839190611c4e565b60405180910390a250565b6004818154811061049e57600080fd5b906000526020600020016000915090505481565b6104ba610f3d565b73ffffffffffffffffffffffffffffffffffffffff166104d8610ac0565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590611e33565b60405180910390fd5b61ffff801682829050111561057d57818190506040517f0a9fd21a0000000000000000000000000000000000000000000000000000000081526004016105749190611c4e565b60405180910390fd5b60005b828290508161ffff16101561070a5782828261ffff168181106105a6576105a5611f4d565b5b90506080020160600160208101906105be9190611f91565b156105f1576105ec83838361ffff168181106105dd576105dc611f4d565b5b90506080020160000135610f45565b6106f7565b600083838361ffff1681811061060a57610609611f4d565b5b90506080020160200135121561068a5761068583838361ffff1681811061063457610633611f4d565b5b9050608002016020013584848461ffff1681811061065557610654611f4d565b5b9050608002016040013585858561ffff1681811061067657610675611f4d565b5b9050608002016000013561101f565b6106f6565b6106f583838361ffff168181106106a4576106a3611f4d565b5b9050608002016020013584848461ffff168181106106c5576106c4611f4d565b5b9050608002016040013585858561ffff168181106106e6576106e5611f4d565b5b9050608002016000013561120b565b5b5b808061070290611ffb565b915050610580565b505050565b600060149054906101000a900460ff161561075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690612071565b60405180910390fd5b600060159054906101000a900460ff16156107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a6906120dd565b60405180910390fd5b6001600060156101000a81548160ff02191690831515021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f467574757265734d61726b65744d616e616765720000000000000000000000006040518263ffffffff1660e01b8152600401610886919061216f565b602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c791906121b2565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610951336113f7565b5050565b61095d610f3d565b73ffffffffffffffffffffffffffffffffffffffff1661097b610ac0565b73ffffffffffffffffffffffffffffffffffffffff16146109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c890611e33565b60405180910390fd5b6109db60006113f7565b565b600060149054906101000a900460ff1615610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490612071565b60405180910390fd5b600060159054906101000a900460ff1615610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a74906120dd565b60405180910390fd5b6001600060156101000a81548160ff021916908315150217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600480549050905090565b610afe610f3d565b73ffffffffffffffffffffffffffffffffffffffff16610b1c610ac0565b73ffffffffffffffffffffffffffffffffffffffff1614610b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6990611e33565b60405180910390fd5b60008103610bac576040517f46f1397d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610bf2610ac0565b30846040518463ffffffff1660e01b8152600401610c12939291906121df565b6020604051808303816000875af1158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c559190611eb4565b610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90612262565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051610cda9190611c4e565b60405180910390a250565b6060600060048054905067ffffffffffffffff811115610d0857610d07612282565b5b604051908082528060200260200182016040528015610d4157816020015b610d2e61189a565b815260200190600190039081610d265790505b50905060005b6004805490508161ffff161015610e3e576005600060048361ffff1681548110610d7457610d73611f4d565b5b90600052602060002001548152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a9004600f0b600f0b600f0b81525050828261ffff1681518110610e2057610e1f611f4d565b5b60200260200101819052508080610e3690611ffb565b915050610d47565b508091505090565b610e4e610f3d565b73ffffffffffffffffffffffffffffffffffffffff16610e6c610ac0565b73ffffffffffffffffffffffffffffffffffffffff1614610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb990611e33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890612323565b60405180910390fd5b610f3a816113f7565b50565b600033905090565b610f4e816114bb565b6000610f5982611654565b90508073ffffffffffffffffffffffffffffffffffffffff1663c393d0e36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16635a1cbd2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b505050505050565b600083131561106557826040517f656b105f00000000000000000000000000000000000000000000000000000000815260040161105c919061235c565b60405180910390fd5b600061107082611654565b905060008314611108578073ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0847f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016110d5929190612377565b600060405180830381600087803b1580156110ef57600080fd5b505af1158015611103573d6000803e3d6000fd5b505050505b8073ffffffffffffffffffffffffffffffffffffffff166388a3c848856040518263ffffffff1660e01b8152600401611141919061235c565b600060405180830381600087803b15801561115b57600080fd5b505af115801561116f573d6000803e3d6000fd5b505050506000808273ffffffffffffffffffffffffffffffffffffffff166355f57510306040518263ffffffff1660e01b81526004016111af9190611c24565b60a060405180830381865afa1580156111cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f09190612438565b94505093505050611203848383866116f9565b505050505050565b600083121561125157826040517f4338bced000000000000000000000000000000000000000000000000000000008152600401611248919061235c565b60405180910390fd5b600061125c82611654565b90508073ffffffffffffffffffffffffffffffffffffffff166388a3c848856040518263ffffffff1660e01b8152600401611297919061235c565b600060405180830381600087803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b505050506000831461135f578073ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0847f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161132c929190612377565b600060405180830381600087803b15801561134657600080fd5b505af115801561135a573d6000803e3d6000fd5b505050505b6000808273ffffffffffffffffffffffffffffffffffffffff166355f57510306040518263ffffffff1660e01b815260040161139b9190611c24565b60a060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190612438565b945050935050506113ef848383866116f9565b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000801b60056000838152602001908152602001600020600001540361151857806040517f143359ab00000000000000000000000000000000000000000000000000000000815260040161150f9190611a30565b60405180910390fd5b600560008281526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550506000600480549050905060005b818161ffff161015611627578260048261ffff16815481106115ae576115ad611f4d565b5b9060005260206000200154036116145760046001836115cd91906124b3565b815481106115de576115dd611f4d565b5b906000526020600020015460048261ffff168154811061160157611600611f4d565b5b9060005260206000200181905550611627565b808061161f90611ffb565b915050611589565b50600480548061163a576116396124e7565b5b600190038181906000526020600020016000905590555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e63bfadb836040518263ffffffff1660e01b81526004016116b19190611a30565b602060405180830381865afa1580156116ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f291906121b2565b9050919050565b600082600f0b036117725761170d846114bb565b8073ffffffffffffffffffffffffffffffffffffffff16635a1cbd2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561175557600080fd5b505af1158015611769573d6000803e3d6000fd5b50505050611894565b60006040518060600160405280868152602001856fffffffffffffffffffffffffffffffff16815260200184600f0b81525090506000801b6005600087815260200190815260200160002060000154036117f05760048590806001815401808255809150506001900390600052602060002001600090919091909150555b80600560008781526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550905050505b50505050565b60405180606001604052806000801916815260200160006fffffffffffffffffffffffffffffffff1681526020016000600f0b81525090565b600080fd5b600080fd5b6000819050919050565b6118f0816118dd565b81146118fb57600080fd5b50565b60008135905061190d816118e7565b92915050565b600060208284031215611929576119286118d3565b5b6000611937848285016118fe565b91505092915050565b611949816118dd565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6119748161194f565b82525050565b600081600f0b9050919050565b6119908161197a565b82525050565b60006060820190506119ab6000830186611940565b6119b8602083018561196b565b6119c56040830184611987565b949350505050565b6000819050919050565b6119e0816119cd565b81146119eb57600080fd5b50565b6000813590506119fd816119d7565b92915050565b600060208284031215611a1957611a186118d3565b5b6000611a27848285016119ee565b91505092915050565b6000602082019050611a456000830184611940565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611a7057611a6f611a4b565b5b8235905067ffffffffffffffff811115611a8d57611a8c611a50565b5b602083019150836080820283011115611aa957611aa8611a55565b5b9250929050565b60008060208385031215611ac757611ac66118d3565b5b600083013567ffffffffffffffff811115611ae557611ae46118d8565b5b611af185828601611a5a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2882611afd565b9050919050565b611b3881611b1d565b8114611b4357600080fd5b50565b600081359050611b5581611b2f565b92915050565b60008060408385031215611b7257611b716118d3565b5b6000611b8085828601611b46565b9250506020611b9185828601611b46565b9150509250929050565b6000819050919050565b6000611bc0611bbb611bb684611afd565b611b9b565b611afd565b9050919050565b6000611bd282611ba5565b9050919050565b6000611be482611bc7565b9050919050565b611bf481611bd9565b82525050565b6000602082019050611c0f6000830184611beb565b92915050565b611c1e81611b1d565b82525050565b6000602082019050611c396000830184611c15565b92915050565b611c48816119cd565b82525050565b6000602082019050611c636000830184611c3f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c9e816118dd565b82525050565b611cad8161194f565b82525050565b611cbc8161197a565b82525050565b606082016000820151611cd86000850182611c95565b506020820151611ceb6020850182611ca4565b506040820151611cfe6040850182611cb3565b50505050565b6000611d108383611cc2565b60608301905092915050565b6000602082019050919050565b6000611d3482611c69565b611d3e8185611c74565b9350611d4983611c85565b8060005b83811015611d7a578151611d618882611d04565b9750611d6c83611d1c565b925050600181019050611d4d565b5085935050505092915050565b60006020820190508181036000830152611da18184611d29565b905092915050565b600060208284031215611dbf57611dbe6118d3565b5b6000611dcd84828501611b46565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e1d602083611dd6565b9150611e2882611de7565b602082019050919050565b60006020820190508181036000830152611e4c81611e10565b9050919050565b6000604082019050611e686000830185611c15565b611e756020830184611c3f565b9392505050565b60008115159050919050565b611e9181611e7c565b8114611e9c57600080fd5b50565b600081519050611eae81611e88565b92915050565b600060208284031215611eca57611ec96118d3565b5b6000611ed884828501611e9f565b91505092915050565b7f4d617267696e426173653a207769746864726177206661696c65640000000000600082015250565b6000611f17601b83611dd6565b9150611f2282611ee1565b602082019050919050565b60006020820190508181036000830152611f4681611f0a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081359050611f8b81611e88565b92915050565b600060208284031215611fa757611fa66118d3565b5b6000611fb584828501611f7c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061ffff82169050919050565b600061200682611fed565b915061ffff820361201a57612019611fbe565b5b600182019050919050565b7f43616e6e6f7420696e697469616c697a6520696d706c656d656e746174696f6e600082015250565b600061205b602083611dd6565b915061206682612025565b602082019050919050565b6000602082019050818103600083015261208a8161204e565b9050919050565b7f416c726561647920696e697469616c697a656400000000000000000000000000600082015250565b60006120c7601383611dd6565b91506120d282612091565b602082019050919050565b600060208201905081810360008301526120f6816120ba565b9050919050565b7f4d617267696e426173653a20436f756c64206e6f74206765742046757475726560008201527f73204d61726b6574204d616e6167657200000000000000000000000000000000602082015250565b6000612159603083611dd6565b9150612164826120fd565b604082019050919050565b60006040820190506121846000830184611940565b81810360208301526121958161214c565b905092915050565b6000815190506121ac81611b2f565b92915050565b6000602082840312156121c8576121c76118d3565b5b60006121d68482850161219d565b91505092915050565b60006060820190506121f46000830186611c15565b6122016020830185611c15565b61220e6040830184611c3f565b949350505050565b7f4d617267696e426173653a206465706f736974206661696c6564000000000000600082015250565b600061224c601a83611dd6565b915061225782612216565b602082019050919050565b6000602082019050818103600083015261227b8161223f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061230d602683611dd6565b9150612318826122b1565b604082019050919050565b6000602082019050818103600083015261233c81612300565b9050919050565b6000819050919050565b61235681612343565b82525050565b6000602082019050612371600083018461234d565b92915050565b600060408201905061238c600083018561234d565b6123996020830184611940565b9392505050565b600067ffffffffffffffff82169050919050565b6123bd816123a0565b81146123c857600080fd5b50565b6000815190506123da816123b4565b92915050565b6123e98161194f565b81146123f457600080fd5b50565b600081519050612406816123e0565b92915050565b6124158161197a565b811461242057600080fd5b50565b6000815190506124328161240c565b92915050565b600080600080600060a08688031215612454576124536118d3565b5b6000612462888289016123cb565b9550506020612473888289016123cb565b9450506040612484888289016123f7565b9350506060612495888289016123f7565b92505060806124a688828901612423565b9150509295509295909350565b60006124be826119cd565b91506124c9836119cd565b9250828210156124dc576124db611fbe565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122066a284e66a9995bed2ac5fd45f7e3ba3c5d1c058c45b1b968cb712690702567564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806305a2ee2a1461005c57806354fd4d501461007a5780635c60da1b1461009857806382689cae146100b6578063bf335e62146100d4575b600080fd5b6100646100f2565b60405161007191906104ed565b60405180910390f35b610082610116565b60405161008f91906105a1565b60405180910390f35b6100a06101a4565b6040516100ad9190610622565b60405180910390f35b6100be6101c8565b6040516100cb919061065e565b60405180910390f35b6100dc6101ec565b6040516100e991906104ed565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054610123906106a8565b80601f016020809104026020016040519081016040528092919081815260200182805461014f906106a8565b801561019c5780601f106101715761010080835404028352916020019161019c565b820191906000526020600020905b81548152906001019060200180831161017f57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061024e7f00000000000000000000000000000000000000000000000000000000000000006040518060400160405280601081526020017f4372656174696f6e206661696c757265000000000000000000000000000000008152506103bd565b90508073ffffffffffffffffffffffffffffffffffffffff1663485cc9557f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016102cb9291906106d9565b600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161033691906104ed565b600060405180830381600087803b15801561035057600080fd5b505af1158015610364573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f14cb25cca821184a88389fa7823ef6a4cd65897a89cbdcf5169542b8d790478b826040516103ae91906104ed565b60405180910390a28091505090565b6000806103c984610451565b90506037602082016000f09150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158390610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044091906105a1565b60405180910390fd5b505092915050565b6060693d602d80600a3d3981f360b01b69363d3d373d3d3d363d7360b01b836e5af43d82803e903d91602b57fd5bf360881b60405160200161049694939291906107e4565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d7826104ac565b9050919050565b6104e7816104cc565b82525050565b600060208201905061050260008301846104de565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610542578082015181840152602081019050610527565b83811115610551576000848401525b50505050565b6000601f19601f8301169050919050565b600061057382610508565b61057d8185610513565b935061058d818560208601610524565b61059681610557565b840191505092915050565b600060208201905081810360008301526105bb8184610568565b905092915050565b6000819050919050565b60006105e86105e36105de846104ac565b6105c3565b6104ac565b9050919050565b60006105fa826105cd565b9050919050565b600061060c826105ef565b9050919050565b61061c81610601565b82525050565b60006020820190506106376000830184610613565b92915050565b6000610648826105ef565b9050919050565b6106588161063d565b82525050565b6000602082019050610673600083018461064f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106c057607f821691505b6020821081036106d3576106d2610679565b5b50919050565b60006040820190506106ee60008301856104de565b6106fb60208301846104de565b9392505050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61074961074482610702565b61072e565b82525050565b60008160601b9050919050565b60006107678261074f565b9050919050565b60006107798261075c565b9050919050565b61079161078c826104cc565b61076e565b82525050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b6000819050919050565b6107de6107d982610797565b6107c3565b82525050565b60006107f08287610738565b600a820191506108008286610738565b600a820191506108108285610780565b60148201915061082082846107cd565b600f820191508190509594505050505056fea26469706673582212200c1caac3a7f2f534a6249f8b6f108a068dea80a2577cdc2a6aa81627e0383b5264736f6c634300080d0033",
  "devdoc": {
    "author": "JaredBorders and JChiaramonte7",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_addressResolver": ": contract address for synthetix address resolver",
          "_marginAsset": ": token contract address used for account margin",
          "_version": ": version of contract"
        }
      },
      "newAccount()": {
        "details": "this contract is the initial owner of cloned MarginBase, but ownership is transferred after successful initialization"
      }
    },
    "title": "Kwenta MarginBase Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressResolver()": {
        "notice": "synthetix address resolver"
      },
      "constructor": {
        "notice": "deploy MarginBase implementation to later be cloned"
      },
      "implementation()": {
        "notice": "MarginBase contract acting as user's account"
      },
      "marginAsset()": {
        "notice": "ERC20 token used to interact with markets"
      },
      "newAccount()": {
        "notice": "clone MarginBase (i.e. create new account for user)"
      }
    },
    "notice": "Factory which enables deploying a MarginBase account for any user ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 214,
        "contract": "contracts/MarginAccountFactory.sol:MarginAccountFactory",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}